"""
Django settings for door_commander project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import ipaddress
import socket
from pathlib import Path
from django.core.management.utils import get_random_secret_key
import pickle
import os
import json

from icecream import ic

_DJANGO_LOGGING = os.getenv("DJANGO_LOGGING")
LOGGING = json.loads(_DJANGO_LOGGING) if _DJANGO_LOGGING else {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'DEBUG',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}




# Build paths inside the project like this: BASE_DIR / 'subdir'.
from paho.mqtt.client import MQTTv5

BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

DEBUG_FILE = BASE_DIR.joinpath("./data/ACTIVATE_DEBUG_MODE")
# If you want to debug; create a file in the directory indicated above.
DEBUG = DEBUG_FILE.exists()
ENABLE_LIVE_JS = DEBUG and False
# this allows to use {% if debug %} in django templates.
INTERNAL_IPS = ['127.0.0.1', '::1']

SECRET_KEY_FILE = BASE_DIR.joinpath("./data/django-secret-key.json")


def load_or_create_secret_key() -> str:
    # TODO we might want to record hostname and time of the secret creation in this json, to allow us to recognize if
    #  it becomes a constant during docker builds. Also, we might want to delete/recreate it explicitly during
    #  first startup.
    if SECRET_KEY_FILE.exists():
        secret = json.load(open(SECRET_KEY_FILE, "r"))
        return secret
    else:
        secret = get_random_secret_key()
        json.dump(secret, open(SECRET_KEY_FILE, "w"))
        return secret


SECRET_KEY = load_or_create_secret_key()

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '[::1]',
    'python',
    # 'door-commander.betreiberverein.de',
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',  # https://docs.djangoproject.com/en/3.2/ref/contrib/admin/
    'django.contrib.auth',  # https://docs.djangoproject.com/en/3.2/ref/contrib/auth/
    'django.contrib.contenttypes',  # https://docs.djangoproject.com/en/3.2/ref/contrib/contenttypes/
    'django.contrib.sessions',  # https://docs.djangoproject.com/en/3.2/topics/http/sessions/
    'django.contrib.messages',  # https://docs.djangoproject.com/en/3.2/ref/contrib/messages/
    'django.contrib.staticfiles',  # https://docs.djangoproject.com/en/3.2/ref/contrib/staticfiles/
    'web_homepage',
    'accounts',
]

MIDDLEWARE = [
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
]

ROOT_URLCONF = 'door_commander.urls'
AUTH_USER_MODEL = "accounts.User"
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.jinja2.Jinja2',
        'DIRS': ["jinja-templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'environment': 'web_homepage.jinja.environment'
        },
    },
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ["templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'door_commander.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

POSTGRES_DB = os.getenv("POSTGRES_DB")
if not POSTGRES_DB:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'data' / 'db.sqlite3',
        }
    }
else:
    POSTGRES_PASSWORD = os.getenv("POSTGRES_PASSWORD")
    POSTGRES_USER = os.getenv("POSTGRES_USER")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': POSTGRES_DB,
            'USER': POSTGRES_USER,
            'PASSWORD': POSTGRES_PASSWORD,
            'HOST': 'db',
        }
    }

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        # TODO we should use a german list for our target group, however, these are difficult to find.
        #  Use Duden, given names, surnames, sports clubs and qwertz-Keywalks?
        # https://docs.djangoproject.com/en/3.1/topics/auth/passwords/#password-validation
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        # 'password_list_path' : '...'
        # This file should contain one lowercase password per line and may be plain text or gzipped.
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
# STATICFILES_DIRS = ["static"]
STATIC_ROOT = os.getenv("COLLECTSTATIC_DIR", None)

LOGIN_REDIRECT_URL = "/"

# TODO might be a vuln in some networks
PROXY_HOSTNAME = "nginx"
try:
    _,_,_nginx_address = socket.gethostbyname_ex(PROXY_HOSTNAME)
except socket.gaierror:
    _nginx_address = None

# TODO library is broken ~phi1010
if _nginx_address:
    IPWARE_KWARGS = dict(request_header_order=['X_FORWARDED_FOR', 'HTTP_X_FORWARDED_FOR', 'REMOTE_ADDR',], proxy_trusted_ips=[*_nginx_address])
else:
    IPWARE_KWARGS = dict(proxy_trusted_ips=[], proxy_count=0)

PERMITTED_IP_NETWORKS = [ipaddress.ip_network('192.168.0.0/24')]

# https://www.eclipse.org/paho/index.php?page=clients/python/docs/index.php#connect-reconnect-disconnect
# MQTT_CLIENT_KWARGS = dict(client_id="door_commander", transport="tcp")
MQTT_CLIENT_KWARGS = dict(transport="tcp")
MQTT_PASSWD_CONTROLLER = os.getenv("MQTT_PASSWD_CONTROLLER")
MQTT_SERVER_KWARGS = os.getenv("MQTT_CONNECTION")
if MQTT_SERVER_KWARGS is None:
    MQTT_SERVER_KWARGS = dict(host="127.0.0.1", port=1883, keepalive=10)
else:
    MQTT_SERVER_KWARGS = json.loads(MQTT_SERVER_KWARGS)
if MQTT_PASSWD_CONTROLLER:
    MQTT_PASSWORD_AUTH = dict(username="controller", password=MQTT_PASSWD_CONTROLLER)
else:
    MQTT_PASSWORD_AUTH = None  # dict(username=...,password=...)

MQTT_TLS = False
